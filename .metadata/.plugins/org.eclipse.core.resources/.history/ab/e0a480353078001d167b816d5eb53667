package com.banco.virtual;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.json.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;



@RestController
@RequestMapping("/api-operation")

public class OperationController {
	
	/*String uri = "http://localhost:12001/api-account/listid?id="+id;
	RestTemplate restTemplate = new RestTemplate();

	String account= restTemplate.getForObject(uri,String.class);
	JSONObject jsonObject = new JSONObject(account);
	
	List<?> customers = repository.findByIdCustomer(id);
	
	for(Object str : customers)
	{
	    //imprimimos el objeto pivote
		JSONObject jsonObject2 = new JSONObject(str);
		
		 System.out.println("OBJ "+ jsonObject2.getString("type"));
	}
	 /*System.out.println("Tipo "+ jsonObject.getString("type"));
	 
	 if( jsonObject.getString("type").equals("Personal"))
	 {
		 return repository.save(account);
	 }
	 
	 else
	 {
		 
		 return null;
	 }


	*/
	
	
	@GetMapping("/deposito")
	public ResponseEntity<?> deposito(@RequestParam ("account") String account , @RequestParam ("amount") Double amount)
	{
		
		String uri = "http://localhost:12002/api-account/naccount?account="+account;
		RestTemplate restTemplate = new RestTemplate();
		
		String cuenta= restTemplate.getForObject(uri,String.class);
		JSONObject jsonObject = new JSONObject(cuenta);
		
		System.out.println("Monto actual "+ jsonObject.getBigDecimal("amount"));
		
		System.out.println("Monto a depositar "+ amount);
		
		/*for(Object str : customers)
		{
		    //imprimimos el objeto pivote
			JSONObject jsonObject2 = new JSONObject(str);
			
			 System.out.println("OBJ "+ jsonObject2.getString("type"));
		}*/
		
		/*Customer saveCustomer=null;
		Map<String,Object>response= new HashMap<>();
		if(result.hasErrors())//si encuentra error
		{
			//creamos un list de tipo string q contiene los mensajes de error
			
			List<String> errors= result.getFieldErrors() //por cada elemento de fieldError lo convertimos a string
					.stream().map(err ->"El campo '"+ err.getField()+ "'" +err.getDefaultMessage()) //como es 1 sola linea no necesita el return
					.collect(Collectors.toList());
			
					
			response.put("Errors",errors);
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.BAD_REQUEST);
		}
		
		try
		{
			saveCustomer = this.service.save(customer);
		}
		catch(DataAccessException e)
		{
			response.put("Mensaje","Error al ingresar informacion en la base de datos" );
			response.put("Error",e.getMessage()+" :" +e.getMostSpecificCause().getMessage());
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		response.put("Mensaje","El customer fue registrado con exito" );
		response.put("Customer: ",saveCustomer);
		
		return new ResponseEntity<Map<String,Object>>(response,HttpStatus.CREATED);
		
		*/
		return null;
	}
	

}
